//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Fantacode Studios Backup/Rope Swinging System/Game/Input Manager/SwingingInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#if inputsystem
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FS_SwingSystem
{
    public partial class @SwingingInputAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @SwingingInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""SwingingInputAction"",
    ""maps"": [
        {
            ""name"": ""Swing"",
            ""id"": ""552d1d9c-0a55-4edf-b5b2-2c648cd861c1"",
            ""actions"": [
                {
                    ""name"": ""Hook"",
                    ""type"": ""Button"",
                    ""id"": ""7af5d535-fe58-4f84-a1fa-b73971d029df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HookRelease"",
                    ""type"": ""Button"",
                    ""id"": ""de2b5334-a88c-4e8d-98f8-bfca06392bbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClimbModifier"",
                    ""type"": ""Button"",
                    ""id"": ""45a1e5f8-53e5-4d5b-abd1-3726ed02f7e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""474a4dac-1c80-46d7-bb86-c880cb4efae4"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b71ed327-8ecf-425b-b498-d8a1918e5b25"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ca697e4-0525-4b00-a7d7-8d787723168f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16e6773c-0986-4d72-bfb5-131771a78a90"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HookRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dd06700-fd12-4f35-8898-ee1b6e1127d4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClimbModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""adb52b04-f44b-4170-a729-09f088dd1757"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClimbModifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Swing
            m_Swing = asset.FindActionMap("Swing", throwIfNotFound: true);
            m_Swing_Hook = m_Swing.FindAction("Hook", throwIfNotFound: true);
            m_Swing_HookRelease = m_Swing.FindAction("HookRelease", throwIfNotFound: true);
            m_Swing_ClimbModifier = m_Swing.FindAction("ClimbModifier", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Swing
        private readonly InputActionMap m_Swing;
        private List<ISwingActions> m_SwingActionsCallbackInterfaces = new List<ISwingActions>();
        private readonly InputAction m_Swing_Hook;
        private readonly InputAction m_Swing_HookRelease;
        private readonly InputAction m_Swing_ClimbModifier;
        public struct SwingActions
        {
            private @SwingingInputAction m_Wrapper;
            public SwingActions(@SwingingInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Hook => m_Wrapper.m_Swing_Hook;
            public InputAction @HookRelease => m_Wrapper.m_Swing_HookRelease;
            public InputAction @ClimbModifier => m_Wrapper.m_Swing_ClimbModifier;
            public InputActionMap Get() { return m_Wrapper.m_Swing; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SwingActions set) { return set.Get(); }
            public void AddCallbacks(ISwingActions instance)
            {
                if (instance == null || m_Wrapper.m_SwingActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SwingActionsCallbackInterfaces.Add(instance);
                @Hook.started += instance.OnHook;
                @Hook.performed += instance.OnHook;
                @Hook.canceled += instance.OnHook;
                @HookRelease.started += instance.OnHookRelease;
                @HookRelease.performed += instance.OnHookRelease;
                @HookRelease.canceled += instance.OnHookRelease;
                @ClimbModifier.started += instance.OnClimbModifier;
                @ClimbModifier.performed += instance.OnClimbModifier;
                @ClimbModifier.canceled += instance.OnClimbModifier;
            }

            private void UnregisterCallbacks(ISwingActions instance)
            {
                @Hook.started -= instance.OnHook;
                @Hook.performed -= instance.OnHook;
                @Hook.canceled -= instance.OnHook;
                @HookRelease.started -= instance.OnHookRelease;
                @HookRelease.performed -= instance.OnHookRelease;
                @HookRelease.canceled -= instance.OnHookRelease;
                @ClimbModifier.started -= instance.OnClimbModifier;
                @ClimbModifier.performed -= instance.OnClimbModifier;
                @ClimbModifier.canceled -= instance.OnClimbModifier;
            }

            public void RemoveCallbacks(ISwingActions instance)
            {
                if (m_Wrapper.m_SwingActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISwingActions instance)
            {
                foreach (var item in m_Wrapper.m_SwingActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SwingActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SwingActions @Swing => new SwingActions(this);
        public interface ISwingActions
        {
            void OnHook(InputAction.CallbackContext context);
            void OnHookRelease(InputAction.CallbackContext context);
            void OnClimbModifier(InputAction.CallbackContext context);
        }
    }
}
#endif